---
title: "Hands-on Exercise 4: 1st Order Spatial Point Patterns Analysis Methods"
---

# Importing Packages

```{r}
pacman::p_load(maptools, sf, raster, spatstat, tmap)
```

# Reading Data

```{r}
childcare_sf <- st_read("data/child-care-services-geojson.geojson") %>%
  st_transform(crs = 3414)
```

```{r}
sg_sf <- st_read(dsn = "data", layer="CostalOutline")
```

```{r}
mpsz_sf <- st_read(dsn = "data", 
                layer = "MP14_SUBZONE_WEB_PL")
```

```{r}
childcare_sf
```

```{r}
sg_sf
```

```{r}
mpsz_sf
```

## These geospatial data uses an SVY21 projection system.

### Alternatively, a pin map could also be created.

```{r}
tmap_mode('view')
tm_shape(childcare_sf)+
  tm_dots()
```

```{r}
tmap_mode('plot')
```

# Geospatial Data Wrangling

## Learning to convert simple feature )sf.data frame to sp's Spatial\* Class

#### as_Spatial() of sf package (to convert three geospatial data from simple feature data frame to sp's Spatial\* class)

```{r}
childcare <- as_Spatial(childcare_sf)
mpsz <- as_Spatial(mpsz_sf)
sg <- as_Spatial(sg_sf)
```

#### Display information

```{r}
childcare
```

```{r}
mpsz
```

```{r}
sg
```

## Learning to convert sp's Spatial\* Class to generic sp format

### spstat requires analytical data in ppp object form

### There is no direct way to convert a Spatial\* Classes into ppp object.

### We need to convert Spatial classes\* into Spatial object first.

```{r}
childcare_sp <- as(childcare, "SpatialPoints")
sg_sp <- as(sg, "SpatialPolygons")
mpsz_sp <- as(mpsz, "SpatialPolygons")

```

### Display the sp objects properties

```{r}
childcare_sp
```

```{r}
sg_sp
```

```{r}
mpsz_sp
```

## Learning to convert generic sp format into spatstat's ppp format

### as.ppp() of spatstat (to convert spatial data into spatstat's ppp object format)

```{r}
childcare_ppp <- as(childcare_sp, "ppp")
childcare_ppp
```

## Plot and observe difference

```{r}
plot(childcare_ppp)
```

```{r}
summary(childcare_ppp)
```

## Handling Duplicated Points

### Check for duplication

```{r}
any(duplicated(childcare_ppp))
```

### Count number of co-indicence point

#### multiplicity()

```{r}
multiplicity(childcare_ppp)
```

### Check how many locations have more than one point event

```{r}
sum(multiplicity(childcare_ppp) > 1)
```

### View locations of duplicated point events

```{r}
tmap_mode('view')
tm_shape(childcare) +
  tm_dots(alpha=0.4, 
          size=0.05)
```

##### Always remember to switch back tmap_mode to plot

```{r}
tmap_mode('plot')
```

# How to overcome duplicated points problem?

## 1) Deletion of duplicates: Some useful point events will be lost

## 2) Jittering: will add a small perturbation to the duplicated points so that they do not occupy the same exact space

## 3) Make each point "unique" and then attach duplicates of points to the patterns as marks, as attributes of the points. Would need analytical techniques that take into account these marks

## Jittering approach

```{r}
childcare_ppp_jit <- rjitter(childcare_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
```

### Check for any duplicated point in this geospatial data

```{r}
any(duplicated(childcare_ppp_jit))
```

# Creating owin object

## Good practice to confine the analysis with a geographical area like Singapore boundary (when analysing spatial point patterns)

## owin object of spatstat -- specially designed to represent this polygonal region

```{r}
sg_owin <- as(sg_sp, "owin")
```

## display output object

```{r}
plot(sg_owin)
```

## summary() of base R

```{r}
summary(sg_owin)
```

# Creating point events object and owin object

## Extract childcare events that are located within Singapore

```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
```

## Ouput object

```{r}
summary(childcareSG_ppp)
```

## Plot newly derived childcare_ppp

```{r}
plot(childcareSG_ppp)
```

# First-order Spatial Point Patterns Analysis

## Kernel Density Estimation (KDE)

### density() of spatstat:

```{r}
kde_childcareSG_bw <- density(childcareSG_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian") 
```

### Plot KDE derived

```{r}
plot(kde_childcareSG_bw)
```

#### Observation: Density values of output range from 0 to 0.000035 which is way too small to comprehend. This is because the default measurement f SVY21 is in meters. Hence, the density values computed is in "number of points per square meter".

### Can retrieve bandwidth used to compute the KDE layer by:

```{r}
bw <- bw.diggle(childcareSG_ppp)
bw
```

## Rescaling KDE values

### rescale() to convert unit of measurement from meter to kilometer

```{r}
childcareSG_ppp.km <- rescale(childcareSG_ppp, 1000, "km")
```

### rerun density() using resale data set and plot output KDE map

```{r}
kde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG.bw)
```

#### Note: output image identical to previous output, only changes the data values in the legend

## Working with different automatic bandwidth methods

### Other than bw.diggle(), there are other spatstat functions that can be used to determine bandwidth such as bw.CvL(), bw.scott(), and bw.ppl().

```{r}
bw.CvL(childcareSG_ppp.km)
```

```{r}
bw.scott(childcareSG_ppp.km)
```

```{r}
bw.ppl(childcareSG_ppp.km)
```

```{r}
bw.diggle(childcareSG_ppp.km)
```

## Comparison of output between bw.diggle and bw.ppl

```{r}
kde_childcareSG.ppl <- density(childcareSG_ppp.km, 
                               sigma=bw.ppl, 
                               edge=TRUE,
                               kernel="gaussian")
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "bw.diggle")
plot(kde_childcareSG.ppl, main = "bw.ppl")
```

## Working with different kernel methods

### By default, kernel method used in density.ppp() is gaussian. Other methods: Epanechnikov, Quartic and Dics.

```{r}
par(mfrow=c(2,2))
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="Gaussian")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="epanechnikov"), 
     main="Epanechnikov")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="quartic"), 
     main="Quartic")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="disc"), 
     main="Disc")
```

# Fixed and Adaptive KDE

## Computing KDE by using fixed bandwidth

### Next, compute a KDE layer by defining a bandwidth of 600 meter.

### Sigma value is 0.6 in the code below as the unit of measurement of childcareSG_ppp.km object is in kilometer, hence the 600m is 0.6km.

```{r}
kde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG_600)
```

## Computing KDE by using adaptive bandwidth

### Fixed bandwidth method is very sensitive to highly skew distribution of spatial point patterns over geographical units, eg. urban vs rural. To overcome this, use adaptive bandwidth.

### density_adaptive() of spatstat (to derive adaptive kernel density estimation)

```{r}
kde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method="kernel")
plot(kde_childcareSG_adaptive)
```

### Compare the fixed and adaptive kernel density estimation outputs

```{r}
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "Fixed bandwidth")
plot(kde_childcareSG_adaptive, main = "Adaptive bandwidth")
```

# Converting KDE output into grid object

## Result same, but convert it so that it is suitable for mapping purposes

```{r}
gridded_kde_childcareSG_bw <- as.SpatialGridDataFrame.im(kde_childcareSG.bw)
spplot(gridded_kde_childcareSG_bw)
```

## Converting gridded output into raster

### raster() of raster package (to convert gridded density objects into RasterLayer object)

```{r}
kde_childcareSG_bw_raster <- raster(gridded_kde_childcareSG_bw)
```

### Properties of kde_childcareSG_bw_raster RasterLayer

```{r}
kde_childcareSG_bw_raster
```

#### Note: crs property is NA

# Assigning projection systems

## Code chunk to include CRS infotrmation on kde_childcareSG_bw_raster RasterLayer

```{r}
projection(kde_childcareSG_bw_raster) <- CRS("+init=EPSG:3414")
kde_childcareSG_bw_raster
```

#### Note: crs property is completed.

# Visualising output in tmap

## Firstly,

### tmap package to display raster in cartographic quality map

```{r}
tm_shape(kde_childcareSG_bw_raster) + 
  tm_raster("v") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
```

#### Notice raster values are encoded explicitly onto the raster pixel using the values in the "v" field.

# Comparing Spatial Point Patterns using KDE

### Learn how to compare KDE of childcare at Punggol, Tampines, Chua Chu Kang and Jurong West planning areas.

## Extracting study area

### Extract target planning areas

```{r}
pg = mpsz[mpsz@data$PLN_AREA_N == "PUNGGOL",]
tm = mpsz[mpsz@data$PLN_AREA_N == "TAMPINES",]
ck = mpsz[mpsz@data$PLN_AREA_N == "CHOA CHU KANG",]
jw = mpsz[mpsz@data$PLN_AREA_N == "JURONG WEST",]
```

### Plot target planning areas

```{r}
par(mfrow=c(2,2))
plot(pg, main = "Ponggol")
plot(tm, main = "Tampines")
plot(ck, main = "Choa Chu Kang")
plot(jw, main = "Jurong West")
```

## Converting the spatial point data frame into generic sp format

### Convert SpatialPolygonsDataFrame layers into generic spatialpolygon layers

```{r}
pg_sp = as(pg, "SpatialPolygons")
tm_sp = as(tm, "SpatialPolygons")
ck_sp = as(ck, "SpatialPolygons")
jw_sp = as(jw, "SpatialPolygons")
```

## Creating owin object

### Convert SpatialPolygons objects into owin objects that is required by spatstat

```{r}
pg_owin = as(pg_sp, "owin")
tm_owin = as(tm_sp, "owin")
ck_owin = as(ck_sp, "owin")
jw_owin = as(jw_sp, "owin")
```

## Combine childcare points and study area

### Able to extract code childcare that is within the specific region to do our analysis later on

```{r}
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```

### rescale() used to transform the unit of measurement from metre to kilometre

```{r}
childcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, "km")
```

## Plot study areas and locations of childcare centres

```{r}
par(mfrow=c(2,2))
plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
```

# Computing KDE

### bw.diggle() used to derive bandwidth of each planning area

```{r}
par(mfrow=c(2,2))
plot(density(childcare_pg_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tempines")
plot(density(childcare_ck_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Choa Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="JUrong West")
```

## Computing fixed bandwidth KDE

### For comparison, we will use 250m as the bandwidth.

```{r}
par(mfrow=c(2,2))
plot(density(childcare_ck_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Chou Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="JUrong West")
plot(density(childcare_pg_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tampines")
```

# Nearest Neighbour Analysis

### clarkevans.test of spatstat (to test aggregation for a spatial point pattern)

## Test hypotheses:

### H0 = Childcare centre distribution are randomly distributed

### H1 = Childcare centre distribution are not randomly distributed

## The 95% confidence interval will be used.

## Testing spatial point patterns using Clarks and Evans Test

```{r}
clarkevans.test(childcareSG_ppp,
                correction="none",
                clipregion="sg_owin",
                alternative=c("clustered"),
                nsim=99)
```

## Clarks and Evans Test: Choa Chu Kang planning area

```{r}
clarkevans.test(childcare_ck_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

## Clarks and Evans Test: Tampines planning area

```{r}
clarkevans.test(childcare_tm_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```
